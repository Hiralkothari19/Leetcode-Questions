/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode reverseOddLevels(TreeNode root) {
        if(root==null)
        {
            return root;
        }
        int level=0;
        Queue<TreeNode> q=new LinkedList<TreeNode>();
        q.add(root);
        while(q.size()!=0)
        {
            int len=q.size();
            ArrayList<TreeNode> list=new ArrayList<TreeNode>();
            for(int i=0;i<len;i++)
            {
               TreeNode temp=q.poll();
               if(temp.left!=null)
               {
                q.add(temp.left);
               } 
               if(temp.right!=null)
               {
                 q.add(temp.right);
               }
               if(level%2!=0)
               {
                 list.add(temp);
               }
            }
            if(list.size()>0)
            {
                int i=0,j=list.size()-1;
                while(i<j)
                {
                    TreeNode temp1=list.get(i);
                    TreeNode temp2=list.get(j);
                    int x=temp1.val;
                    temp1.val=temp2.val;
                    temp2.val=x;
                    i++;
                    j--;
                }
            }

            level++;
        }

        return root;
      
    }
}
